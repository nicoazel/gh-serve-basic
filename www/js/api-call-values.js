function gh_api_request_2(){
var radiusXVal = document.getElementById('radiusXVal').value;
var radiusYVal = document.getElementById('radiusYVal').value;
var requestBody = {
  "algo": "",
  "values":
  {
    "Numerator": radiusXVal,
    "Denominator": radiusYVal
  }
}

//var data = new FormData();
data = requestBody;
//data.append('user', 'person');
//data.append('pwd', 'password');
//data.append('organization', 'place');
//data.append('requiredkey', 'key');
var url = document.getElementById('api_url_input').value;

var xhr = new XMLHttpRequest();

xhr.open('POST', url+'/grasshopper', true);//http://21d453c0.ngrok.io
xhr.onload = function () {
    // do something to response
    console.log(this.responseText);
    console.log(this.response);
    //console.log(xhr);
};
xhr.setRequestHeader('Content-type', 'application/json');
xhr.onreadystatechange = function() {//Call a function when the state changes.
    if(xhr.readyState == 4 && xhr.status == 200) {
        alert(xhr.responseText);
        //console.log(xhr);
    }
}
xhr.send(data);

}

// console.log("Submission: " + requestBody.input.radiusX + " / " + requestBody.input.radiusY + " / " + requestBody.input.height + " / " + requestBody.input.twist)

//this.api.post('grasshopper', requestBody).subscribe(result => {
//  console.log(result);
//});
//}
